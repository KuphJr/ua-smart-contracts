/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Requester,
  RequesterInterface,
} from "../../../contracts/Requester.sol/Requester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalAdapter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_requestCost",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "callbackFunctionId",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "string",
        name: "js",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "cid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "vars",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ref",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_result",
        type: "bytes32",
      },
    ],
    name: "fulfillDirectRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "js",
        type: "string",
      },
      {
        internalType: "string",
        name: "cid",
        type: "string",
      },
      {
        internalType: "string",
        name: "vars",
        type: "string",
      },
      {
        internalType: "string",
        name: "ref",
        type: "string",
      },
    ],
    name: "makeRequest",
    outputs: [
      {
        internalType: "bytes32",
        name: "universalAdapterRequestId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "result",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000b8538038062000b858339818101604052810190610034919061015d565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003819055505050506101b0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100f4826100c9565b9050919050565b610104816100e9565b811461010f57600080fd5b50565b600081519050610121816100fb565b92915050565b6000819050919050565b61013a81610127565b811461014557600080fd5b50565b60008151905061015781610131565b92915050565b600080600060608486031215610176576101756100c4565b5b600061018486828701610112565b935050602061019586828701610112565b92505060406101a686828701610148565b9150509250925092565b6109c580620001c06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063353b554f1461004657806365372147146100625780638ba8198814610080575b600080fd5b610060600480360381019061005b919061044c565b6100b0565b005b61006a610184565b604051610077919061049b565b60405180910390f35b61009a6004803603810190610095919061051b565b61018a565b6040516100a7919061049b565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013790610661565b60405180910390fd5b806002819055507f0c2366233f634048c0f0458060d1228fab36d00f7c0ecf6bdf2d9c45850363118183604051610178929190610681565b60405180910390a15050565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306003546040518463ffffffff1660e01b81526004016101ec93929190610704565b6020604051808303816000875af115801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610773565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518363ffffffff1660e01b81526004016102af9291906107a0565b6020604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610773565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d303e6a563353b554f60e01b8c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b815260040161036799989796959493929190610851565b6020604051808303816000875af1158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa91906108dd565b90507f7d765ef4cb8e6506d0a0e6dbd14ddf2915bc7648d0f0f1f7226407c2227a4b9d63353b554f60e01b8b8b8b8b8b8b8b8b8a6040516103f49a9998979695949392919061090a565b60405180910390a18091505098975050505050505050565b600080fd5b600080fd5b6000819050919050565b61042981610416565b811461043457600080fd5b50565b60008135905061044681610420565b92915050565b600080604083850312156104635761046261040c565b5b600061047185828601610437565b925050602061048285828601610437565b9150509250929050565b61049581610416565b82525050565b60006020820190506104b0600083018461048c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104db576104da6104b6565b5b8235905067ffffffffffffffff8111156104f8576104f76104bb565b5b602083019150836001820283011115610514576105136104c0565b5b9250929050565b6000806000806000806000806080898b03121561053b5761053a61040c565b5b600089013567ffffffffffffffff81111561055957610558610411565b5b6105658b828c016104c5565b9850985050602089013567ffffffffffffffff81111561058857610587610411565b5b6105948b828c016104c5565b9650965050604089013567ffffffffffffffff8111156105b7576105b6610411565b5b6105c38b828c016104c5565b9450945050606089013567ffffffffffffffff8111156105e6576105e5610411565b5b6105f28b828c016104c5565b92509250509295985092959890939650565b600082825260208201905092915050565b7f4e6f7420556e6976657273616c20416461707465720000000000000000000000600082015250565b600061064b601583610604565b915061065682610615565b602082019050919050565b6000602082019050818103600083015261067a8161063e565b9050919050565b6000604082019050610696600083018561048c565b6106a3602083018461048c565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d5826106aa565b9050919050565b6106e5816106ca565b82525050565b6000819050919050565b6106fe816106eb565b82525050565b600060608201905061071960008301866106dc565b61072660208301856106dc565b61073360408301846106f5565b949350505050565b60008115159050919050565b6107508161073b565b811461075b57600080fd5b50565b60008151905061076d81610747565b92915050565b6000602082840312156107895761078861040c565b5b60006107978482850161075e565b91505092915050565b60006040820190506107b560008301856106dc565b6107c260208301846106f5565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6107fe816107c9565b82525050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006108308385610604565b935061083d838584610804565b61084683610813565b840190509392505050565b600060a082019050610866600083018c6107f5565b8181036020830152610879818a8c610824565b9050818103604083015261088e81888a610824565b905081810360608301526108a3818688610824565b905081810360808301526108b8818486610824565b90509a9950505050505050505050565b6000815190506108d781610420565b92915050565b6000602082840312156108f3576108f261040c565b5b6000610901848285016108c8565b91505092915050565b600060c08201905061091f600083018d6107f5565b8181036020830152610932818b8d610824565b9050818103604083015261094781898b610824565b9050818103606083015261095c818789610824565b90508181036080830152610971818587610824565b905061098060a083018461048c565b9b9a505050505050505050505056fea2646970667358221220a92643dd4e2e38eb3a5f69ed7ce21d1e7281468f6908215a23244c724167f22d64736f6c634300080e0033";

type RequesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RequesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Requester__factory extends ContractFactory {
  constructor(...args: RequesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _link: string,
    _universalAdapter: string,
    _requestCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Requester> {
    return super.deploy(
      _link,
      _universalAdapter,
      _requestCost,
      overrides || {}
    ) as Promise<Requester>;
  }
  override getDeployTransaction(
    _link: string,
    _universalAdapter: string,
    _requestCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _link,
      _universalAdapter,
      _requestCost,
      overrides || {}
    );
  }
  override attach(address: string): Requester {
    return super.attach(address) as Requester;
  }
  override connect(signer: Signer): Requester__factory {
    return super.connect(signer) as Requester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RequesterInterface {
    return new utils.Interface(_abi) as RequesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Requester {
    return new Contract(address, _abi, signerOrProvider) as Requester;
  }
}
