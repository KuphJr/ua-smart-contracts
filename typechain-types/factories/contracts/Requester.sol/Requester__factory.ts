/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Requester,
  RequesterInterface,
} from "../../../contracts/Requester.sol/Requester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalAdapter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_requestCost",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "callbackFunctionId",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "string",
        name: "js",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "cid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "vars",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ref",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_result",
        type: "bytes32",
      },
    ],
    name: "fulfillDirectRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "js",
        type: "string",
      },
      {
        internalType: "string",
        name: "cid",
        type: "string",
      },
      {
        internalType: "string",
        name: "vars",
        type: "string",
      },
      {
        internalType: "string",
        name: "ref",
        type: "string",
      },
    ],
    name: "makeRequest",
    outputs: [
      {
        internalType: "bytes32",
        name: "universalAdapterRequestId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "result",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161068e38038061068e83398101604081905261002f91610083565b600080546001600160a01b039485166001600160a01b03199182161790915560018054939094169216919091179091556003556100bf565b80516001600160a01b038116811461007e57600080fd5b919050565b60008060006060848603121561009857600080fd5b6100a184610067565b92506100af60208501610067565b9150604084015190509250925092565b6105c0806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063353b554f14610046578063653721471461005b5780638ba8198814610076575b600080fd5b61005961005436600461030a565b610089565b005b61006460025481565b60405190815260200160405180910390f35b610064610084366004610374565b610121565b6001546001600160a01b031633146100df5760405162461bcd60e51b81526020600482015260156024820152742737ba102ab734bb32b939b0b61020b230b83a32b960591b604482015260640160405180910390fd5b600281905560408051828152602081018490527f0c2366233f634048c0f0458060d1228fab36d00f7c0ecf6bdf2d9c4585036311910160405180910390a15050565b600080546003546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561017d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a19190610437565b5060005460015460035460405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af11580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f9190610437565b5060015460405163d303e6a560e01b81526000916001600160a01b03169063d303e6a5906102689063353b554f60e01b908e908e908e908e908e908e908e908e90600401610489565b6020604051808303816000875af1158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab91906104f9565b90507f7d765ef4cb8e6506d0a0e6dbd14ddf2915bc7648d0f0f1f7226407c2227a4b9d63353b554f60e01b8b8b8b8b8b8b8b8b8a6040516102f59a99989796959493929190610512565b60405180910390a19998505050505050505050565b6000806040838503121561031d57600080fd5b50508035926020909101359150565b60008083601f84011261033e57600080fd5b5081356001600160401b0381111561035557600080fd5b60208301915083602082850101111561036d57600080fd5b9250929050565b6000806000806000806000806080898b03121561039057600080fd5b88356001600160401b03808211156103a757600080fd5b6103b38c838d0161032c565b909a50985060208b01359150808211156103cc57600080fd5b6103d88c838d0161032c565b909850965060408b01359150808211156103f157600080fd5b6103fd8c838d0161032c565b909650945060608b013591508082111561041657600080fd5b506104238b828c0161032c565b999c989b5096995094979396929594505050565b60006020828403121561044957600080fd5b8151801515811461045957600080fd5b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b63ffffffff60e01b8a16815260a0602082015260006104ac60a083018a8c610460565b82810360408401526104bf81898b610460565b905082810360608401526104d4818789610460565b905082810360808401526104e9818587610460565b9c9b505050505050505050505050565b60006020828403121561050b57600080fd5b5051919050565b63ffffffff60e01b8b16815260c06020820152600061053560c083018b8d610460565b8281036040840152610548818a8c610460565b9050828103606084015261055d81888a610460565b90508281036080840152610572818688610460565b9150508260a08301529b9a505050505050505050505056fea2646970667358221220796dc2570dbc069fd8faba7962ed0b5b7fa7742ca3e8d1c8b94a43c22205690d64736f6c634300080e0033";

type RequesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RequesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Requester__factory extends ContractFactory {
  constructor(...args: RequesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _link: string,
    _universalAdapter: string,
    _requestCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Requester> {
    return super.deploy(
      _link,
      _universalAdapter,
      _requestCost,
      overrides || {}
    ) as Promise<Requester>;
  }
  override getDeployTransaction(
    _link: string,
    _universalAdapter: string,
    _requestCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _link,
      _universalAdapter,
      _requestCost,
      overrides || {}
    );
  }
  override attach(address: string): Requester {
    return super.attach(address) as Requester;
  }
  override connect(signer: Signer): Requester__factory {
    return super.connect(signer) as Requester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RequesterInterface {
    return new utils.Interface(_abi) as RequesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Requester {
    return new Contract(address, _abi, signerOrProvider) as Requester;
  }
}
