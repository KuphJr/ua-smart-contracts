/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  DirectRequestAggregatorInterface,
  DirectRequestAggregatorInterfaceInterface,
} from "../../../contracts/Requester.sol/DirectRequestAggregatorInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "callbackAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "callbackFunctionId",
        type: "bytes4",
      },
      {
        internalType: "string",
        name: "js",
        type: "string",
      },
      {
        internalType: "string",
        name: "cid",
        type: "string",
      },
      {
        internalType: "string",
        name: "vars",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "ref",
        type: "bytes32",
      },
    ],
    name: "makeRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class DirectRequestAggregatorInterface__factory {
  static readonly abi = _abi;
  static createInterface(): DirectRequestAggregatorInterfaceInterface {
    return new utils.Interface(
      _abi
    ) as DirectRequestAggregatorInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DirectRequestAggregatorInterface {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DirectRequestAggregatorInterface;
  }
}
