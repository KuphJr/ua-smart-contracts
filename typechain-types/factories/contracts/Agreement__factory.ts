/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Agreement, AgreementInterface } from "../../contracts/Agreement";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract LinkTokenInterface",
        name: "_linkToken",
        type: "address",
      },
      {
        internalType: "contract IUniversalAdapter",
        name: "_universalAdapter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_agreementRegistry",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_agreementId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_creator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_soulbound",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    name: "Fulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "agreementId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "cancellations",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cid",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_result",
        type: "bytes32",
      },
    ],
    name: "fulfillRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "js",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recoverFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_vars",
        type: "string",
      },
      {
        internalType: "string",
        name: "_ref",
        type: "string",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "bytes32",
        name: "universalAdapterRequestId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "soulbound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "_state",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";

type AgreementConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AgreementConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Agreement__factory extends ContractFactory {
  constructor(...args: AgreementConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _linkToken: string,
    _universalAdapter: string,
    _agreementRegistry: string,
    _agreementId: BigNumberish,
    _creator: string,
    _deadline: BigNumberish,
    _soulbound: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Agreement> {
    return super.deploy(
      _linkToken,
      _universalAdapter,
      _agreementRegistry,
      _agreementId,
      _creator,
      _deadline,
      _soulbound,
      data,
      overrides || {}
    ) as Promise<Agreement>;
  }
  override getDeployTransaction(
    _linkToken: string,
    _universalAdapter: string,
    _agreementRegistry: string,
    _agreementId: BigNumberish,
    _creator: string,
    _deadline: BigNumberish,
    _soulbound: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _linkToken,
      _universalAdapter,
      _agreementRegistry,
      _agreementId,
      _creator,
      _deadline,
      _soulbound,
      data,
      overrides || {}
    );
  }
  override attach(address: string): Agreement {
    return super.attach(address) as Agreement;
  }
  override connect(signer: Signer): Agreement__factory {
    return super.connect(signer) as Agreement__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AgreementInterface {
    return new utils.Interface(_abi) as AgreementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Agreement {
    return new Contract(address, _abi, signerOrProvider) as Agreement;
  }
}
