/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace BufferChainlink {
  export type BufferStruct = { buf: BytesLike; capacity: BigNumberish };

  export type BufferStructOutput = [string, BigNumber] & {
    buf: string;
    capacity: BigNumber;
  };
}

export declare namespace Chainlink {
  export type RequestStruct = {
    id: BytesLike;
    callbackAddress: string;
    callbackFunctionId: BytesLike;
    nonce: BigNumberish;
    buf: BufferChainlink.BufferStruct;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BufferChainlink.BufferStructOutput
  ] & {
    id: string;
    callbackAddress: string;
    callbackFunctionId: string;
    nonce: BigNumber;
    buf: BufferChainlink.BufferStructOutput;
  };
}

export interface DirectRequestAggregatorInterface extends utils.Interface {
  functions: {
    "addressToString(address)": FunctionFragment;
    "bytes32ToHexString(bytes32)": FunctionFragment;
    "expirationTimeInSeconds()": FunctionFragment;
    "hashedResponseJobspec()": FunctionFragment;
    "linkCostInJuels()": FunctionFragment;
    "makeRequest(address,bytes4,string,string,string,bytes32)": FunctionFragment;
    "minGasForCallback()": FunctionFragment;
    "minResponses()": FunctionFragment;
    "oracles(uint256)": FunctionFragment;
    "respondWithHashedAnswer(bytes32,bytes32)": FunctionFragment;
    "respondWithUnhashedAnswer(bytes32,uint256,bytes32)": FunctionFragment;
    "roundIds(bytes32)": FunctionFragment;
    "roundNum()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "toByte(uint8)": FunctionFragment;
    "unhashedResponseJobspec()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressToString"
      | "bytes32ToHexString"
      | "expirationTimeInSeconds"
      | "hashedResponseJobspec"
      | "linkCostInJuels"
      | "makeRequest"
      | "minGasForCallback"
      | "minResponses"
      | "oracles"
      | "respondWithHashedAnswer"
      | "respondWithUnhashedAnswer"
      | "roundIds"
      | "roundNum"
      | "rounds"
      | "toByte"
      | "unhashedResponseJobspec"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressToString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToHexString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashedResponseJobspec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkCostInJuels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [string, BytesLike, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minGasForCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minResponses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respondWithHashedAnswer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "respondWithUnhashedAnswer",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "roundIds", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "roundNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toByte",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unhashedResponseJobspec",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToHexString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedResponseJobspec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkCostInJuels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minGasForCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "respondWithHashedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondWithUnhashedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roundNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toByte", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unhashedResponseJobspec",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface DirectRequestAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DirectRequestAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytes32ToHexString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    expirationTimeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashedResponseJobspec(overrides?: CallOverrides): Promise<[string]>;

    linkCostInJuels(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeRequest(
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minGasForCallback(overrides?: CallOverrides): Promise<[BigNumber]>;

    minResponses(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      unhashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundIds(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    roundNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, Chainlink.RequestStructOutput] & {
        expiration: BigNumber;
        callbackAddress: string;
        callbackFunctionId: string;
        request: Chainlink.RequestStructOutput;
      }
    >;

    toByte(
      _uint8: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;

    unhashedResponseJobspec(overrides?: CallOverrides): Promise<[string]>;
  };

  addressToString(_address: string, overrides?: CallOverrides): Promise<string>;

  bytes32ToHexString(
    _bytes32: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  expirationTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  hashedResponseJobspec(overrides?: CallOverrides): Promise<string>;

  linkCostInJuels(overrides?: CallOverrides): Promise<BigNumber>;

  makeRequest(
    callbackAddress: string,
    callbackFunctionId: BytesLike,
    js: string,
    cid: string,
    vars: string,
    ref: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minGasForCallback(overrides?: CallOverrides): Promise<BigNumber>;

  minResponses(overrides?: CallOverrides): Promise<BigNumber>;

  oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  respondWithHashedAnswer(
    requestId: BytesLike,
    hashedAnswer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respondWithUnhashedAnswer(
    requestId: BytesLike,
    salt: BigNumberish,
    unhashedAnswer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  roundNum(overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, Chainlink.RequestStructOutput] & {
      expiration: BigNumber;
      callbackAddress: string;
      callbackFunctionId: string;
      request: Chainlink.RequestStructOutput;
    }
  >;

  toByte(_uint8: BigNumberish, overrides?: CallOverrides): Promise<string>;

  unhashedResponseJobspec(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    bytes32ToHexString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    expirationTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    hashedResponseJobspec(overrides?: CallOverrides): Promise<string>;

    linkCostInJuels(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequest(
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minGasForCallback(overrides?: CallOverrides): Promise<BigNumber>;

    minResponses(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      unhashedAnswer: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    roundIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    roundNum(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, Chainlink.RequestStructOutput] & {
        expiration: BigNumber;
        callbackAddress: string;
        callbackFunctionId: string;
        request: Chainlink.RequestStructOutput;
      }
    >;

    toByte(_uint8: BigNumberish, overrides?: CallOverrides): Promise<string>;

    unhashedResponseJobspec(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;
  };

  estimateGas: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToHexString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expirationTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    hashedResponseJobspec(overrides?: CallOverrides): Promise<BigNumber>;

    linkCostInJuels(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequest(
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minGasForCallback(overrides?: CallOverrides): Promise<BigNumber>;

    minResponses(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      unhashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    roundNum(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toByte(_uint8: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unhashedResponseJobspec(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToHexString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashedResponseJobspec(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkCostInJuels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeRequest(
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minGasForCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minResponses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      unhashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toByte(
      _uint8: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unhashedResponseJobspec(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
