/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AgreementRegistryInterface extends utils.Interface {
  functions: {
    "agreements(uint256)": FunctionFragment;
    "createAgreement(address,uint256,bool,uint256,bytes)": FunctionFragment;
    "creatorAgreements(address,uint256)": FunctionFragment;
    "ids()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemerAgreements(address,uint256)": FunctionFragment;
    "requestCost()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRequestCost(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agreements"
      | "createAgreement"
      | "creatorAgreements"
      | "ids"
      | "owner"
      | "redeemerAgreements"
      | "requestCost"
      | "setOwner"
      | "setRequestCost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [string, BigNumberish, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAgreements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ids", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemerAgreements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRequestCost",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemerAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequestCost",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(uint256,address,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface AgreementCreatedEventObject {
  agreementId: BigNumber;
  agreementContractAddress: string;
  agreement: string;
}
export type AgreementCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface AgreementRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgreementRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createAgreement(
      redeemer: string,
      deadline: BigNumberish,
      soulbound: boolean,
      maxPayout: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ids(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemerAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestCost(
      _requestCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agreements(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createAgreement(
    redeemer: string,
    deadline: BigNumberish,
    soulbound: boolean,
    maxPayout: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorAgreements(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ids(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemerAgreements(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestCost(overrides?: CallOverrides): Promise<BigNumber>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestCost(
    _requestCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreements(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createAgreement(
      redeemer: string,
      deadline: BigNumberish,
      soulbound: boolean,
      maxPayout: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    creatorAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ids(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemerAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestCost(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setRequestCost(
      _requestCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgreementCreated(uint256,address,address)"(
      agreementId?: BigNumberish | null,
      agreementContractAddress?: null,
      agreement?: null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      agreementId?: BigNumberish | null,
      agreementContractAddress?: null,
      agreement?: null
    ): AgreementCreatedEventFilter;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAgreement(
      redeemer: string,
      deadline: BigNumberish,
      soulbound: boolean,
      maxPayout: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ids(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemerAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestCost(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestCost(
      _requestCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAgreement(
      redeemer: string,
      deadline: BigNumberish,
      soulbound: boolean,
      maxPayout: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemerAgreements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestCost(
      _requestCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
