/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AdapterJsTest3Interface extends utils.Interface {
  functions: {
    "boolResult()": FunctionFragment;
    "bytes32AdapterCall(string)": FunctionFragment;
    "bytes32Result()": FunctionFragment;
    "bytesAdapterCall(string)": FunctionFragment;
    "bytesResult()": FunctionFragment;
    "fulfillBytes(bytes32,bytes)": FunctionFragment;
    "fulfillBytes32(bytes32,bytes32)": FunctionFragment;
    "fulfillInt(bytes32,int256)": FunctionFragment;
    "fulfillString(bytes32,string)": FunctionFragment;
    "fulfillUint(bytes32,uint256)": FunctionFragment;
    "intAdapterCall(string)": FunctionFragment;
    "intResult()": FunctionFragment;
    "stringAdapterCall(string)": FunctionFragment;
    "stringResult()": FunctionFragment;
    "uintAdapterCall(string)": FunctionFragment;
    "uintResult()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "boolResult"
      | "bytes32AdapterCall"
      | "bytes32Result"
      | "bytesAdapterCall"
      | "bytesResult"
      | "fulfillBytes"
      | "fulfillBytes32"
      | "fulfillInt"
      | "fulfillString"
      | "fulfillUint"
      | "intAdapterCall"
      | "intResult"
      | "stringAdapterCall"
      | "stringResult"
      | "uintAdapterCall"
      | "uintResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "boolResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32AdapterCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32Result",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytesAdapterCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillBytes",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillInt",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillString",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUint",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intAdapterCall",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "intResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stringAdapterCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uintAdapterCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uintResult",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "boolResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32AdapterCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32Result",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesAdapterCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfillInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intAdapterCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringAdapterCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintAdapterCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uintResult", data: BytesLike): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface AdapterJsTest3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdapterJsTest3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    boolResult(overrides?: CallOverrides): Promise<[boolean]>;

    bytes32AdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bytes32Result(overrides?: CallOverrides): Promise<[string]>;

    bytesAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bytesResult(overrides?: CallOverrides): Promise<[string]>;

    fulfillBytes(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillBytes32(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillInt(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillString(
      _requestId: BytesLike,
      reply: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillUint(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intResult(overrides?: CallOverrides): Promise<[BigNumber]>;

    stringAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringResult(overrides?: CallOverrides): Promise<[string]>;

    uintAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uintResult(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  boolResult(overrides?: CallOverrides): Promise<boolean>;

  bytes32AdapterCall(
    js: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bytes32Result(overrides?: CallOverrides): Promise<string>;

  bytesAdapterCall(
    js: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bytesResult(overrides?: CallOverrides): Promise<string>;

  fulfillBytes(
    _requestId: BytesLike,
    reply: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillBytes32(
    _requestId: BytesLike,
    reply: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillInt(
    _requestId: BytesLike,
    reply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillString(
    _requestId: BytesLike,
    reply: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillUint(
    _requestId: BytesLike,
    reply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intAdapterCall(
    js: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intResult(overrides?: CallOverrides): Promise<BigNumber>;

  stringAdapterCall(
    js: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringResult(overrides?: CallOverrides): Promise<string>;

  uintAdapterCall(
    js: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uintResult(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    boolResult(overrides?: CallOverrides): Promise<boolean>;

    bytes32AdapterCall(js: string, overrides?: CallOverrides): Promise<string>;

    bytes32Result(overrides?: CallOverrides): Promise<string>;

    bytesAdapterCall(js: string, overrides?: CallOverrides): Promise<string>;

    bytesResult(overrides?: CallOverrides): Promise<string>;

    fulfillBytes(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillBytes32(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillInt(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillString(
      _requestId: BytesLike,
      reply: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillUint(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    intAdapterCall(js: string, overrides?: CallOverrides): Promise<string>;

    intResult(overrides?: CallOverrides): Promise<BigNumber>;

    stringAdapterCall(js: string, overrides?: CallOverrides): Promise<string>;

    stringResult(overrides?: CallOverrides): Promise<string>;

    uintAdapterCall(js: string, overrides?: CallOverrides): Promise<string>;

    uintResult(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;
  };

  estimateGas: {
    boolResult(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32AdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bytes32Result(overrides?: CallOverrides): Promise<BigNumber>;

    bytesAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bytesResult(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillBytes(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillBytes32(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillInt(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillString(
      _requestId: BytesLike,
      reply: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillUint(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intResult(overrides?: CallOverrides): Promise<BigNumber>;

    stringAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringResult(overrides?: CallOverrides): Promise<BigNumber>;

    uintAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uintResult(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    boolResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32AdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bytes32Result(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytesAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bytesResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillBytes(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillBytes32(
      _requestId: BytesLike,
      reply: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillInt(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillString(
      _requestId: BytesLike,
      reply: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillUint(
      _requestId: BytesLike,
      reply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stringAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uintAdapterCall(
      js: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uintResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
