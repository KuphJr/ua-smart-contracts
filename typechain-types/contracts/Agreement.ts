/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AgreementInterface extends utils.Interface {
  functions: {
    "agreementId()": FunctionFragment;
    "cancelAgreement()": FunctionFragment;
    "cancellations(address)": FunctionFragment;
    "deadline()": FunctionFragment;
    "fulfillRequest(bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverFunds()": FunctionFragment;
    "redeem(string,string)": FunctionFragment;
    "result()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "soulbound()": FunctionFragment;
    "state()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agreementId"
      | "cancelAgreement"
      | "cancellations"
      | "deadline"
      | "fulfillRequest"
      | "owner"
      | "recoverFunds"
      | "redeem"
      | "result"
      | "setOwner"
      | "soulbound"
      | "state"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agreementId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancellations",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillRequest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "soulbound", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "agreementId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancellations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "soulbound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;

  events: {
    "AgreementCancelled(uint256)": EventFragment;
    "AgreementFulfilled(uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "RequestFulfilled(bytes32,bytes32)": EventFragment;
    "RequestSent(bytes32,string,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface AgreementCancelledEventObject {
  agreementId: BigNumber;
}
export type AgreementCancelledEvent = TypedEvent<
  [BigNumber],
  AgreementCancelledEventObject
>;

export type AgreementCancelledEventFilter =
  TypedEventFilter<AgreementCancelledEvent>;

export interface AgreementFulfilledEventObject {
  agreementId: BigNumber;
}
export type AgreementFulfilledEvent = TypedEvent<
  [BigNumber],
  AgreementFulfilledEventObject
>;

export type AgreementFulfilledEventFilter =
  TypedEventFilter<AgreementFulfilledEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface RequestFulfilledEventObject {
  requestId: string;
  result: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string, string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  requestId: string;
  js: string;
  cid: string;
  vars: string;
  ref: string;
}
export type RequestSentEvent = TypedEvent<
  [string, string, string, string, string],
  RequestSentEventObject
>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface Agreement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgreementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreementId(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAgreement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancellations(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _vars: string,
      _ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    result(overrides?: CallOverrides): Promise<[BigNumber]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    soulbound(overrides?: CallOverrides): Promise<[boolean]>;

    state(overrides?: CallOverrides): Promise<[number] & { _state: number }>;
  };

  agreementId(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAgreement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancellations(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillRequest(
    requestId: BytesLike,
    _result: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _vars: string,
    _ref: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  result(overrides?: CallOverrides): Promise<BigNumber>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  soulbound(overrides?: CallOverrides): Promise<boolean>;

  state(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    agreementId(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAgreement(overrides?: CallOverrides): Promise<void>;

    cancellations(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverFunds(overrides?: CallOverrides): Promise<void>;

    redeem(
      _vars: string,
      _ref: string,
      overrides?: CallOverrides
    ): Promise<string>;

    result(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    soulbound(overrides?: CallOverrides): Promise<boolean>;

    state(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AgreementCancelled(uint256)"(
      agreementId?: BigNumberish | null
    ): AgreementCancelledEventFilter;
    AgreementCancelled(
      agreementId?: BigNumberish | null
    ): AgreementCancelledEventFilter;

    "AgreementFulfilled(uint256)"(
      agreementId?: BigNumberish | null
    ): AgreementFulfilledEventFilter;
    AgreementFulfilled(
      agreementId?: BigNumberish | null
    ): AgreementFulfilledEventFilter;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;

    "RequestFulfilled(bytes32,bytes32)"(
      requestId?: BytesLike | null,
      result?: null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      requestId?: BytesLike | null,
      result?: null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32,string,string,string,string)"(
      requestId?: BytesLike | null,
      js?: null,
      cid?: null,
      vars?: null,
      ref?: null
    ): RequestSentEventFilter;
    RequestSent(
      requestId?: BytesLike | null,
      js?: null,
      cid?: null,
      vars?: null,
      ref?: null
    ): RequestSentEventFilter;
  };

  estimateGas: {
    agreementId(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAgreement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancellations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _vars: string,
      _ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    result(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    soulbound(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    agreementId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAgreement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancellations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _vars: string,
      _ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    result(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    soulbound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
