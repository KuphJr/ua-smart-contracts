/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RequesterInterface extends utils.Interface {
  functions: {
    "aggregatorContract()": FunctionFragment;
    "expirationTime()": FunctionFragment;
    "fulfillDirectRequest(uint256)": FunctionFragment;
    "fulfillOffer(string,string)": FunctionFragment;
    "initalizeOffer()": FunctionFragment;
    "lastBlockFulfillOfferWasCalled()": FunctionFragment;
    "linkTokenContract()": FunctionFragment;
    "offeree()": FunctionFragment;
    "offerer()": FunctionFragment;
    "recoverFunds()": FunctionFragment;
    "registryContract()": FunctionFragment;
    "scriptIpfsHash()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregatorContract"
      | "expirationTime"
      | "fulfillDirectRequest"
      | "fulfillOffer"
      | "initalizeOffer"
      | "lastBlockFulfillOfferWasCalled"
      | "linkTokenContract"
      | "offeree"
      | "offerer"
      | "recoverFunds"
      | "registryContract"
      | "scriptIpfsHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregatorContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillDirectRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOffer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initalizeOffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockFulfillOfferWasCalled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "offeree", values?: undefined): string;
  encodeFunctionData(functionFragment: "offerer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scriptIpfsHash",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillDirectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initalizeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockFulfillOfferWasCalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offeree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scriptIpfsHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Requester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RequesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregatorContract(overrides?: CallOverrides): Promise<[string]>;

    expirationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillDirectRequest(
      amountOwed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOffer(
      url: string,
      apiKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initalizeOffer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBlockFulfillOfferWasCalled(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linkTokenContract(overrides?: CallOverrides): Promise<[string]>;

    offeree(overrides?: CallOverrides): Promise<[string]>;

    offerer(overrides?: CallOverrides): Promise<[string]>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registryContract(overrides?: CallOverrides): Promise<[string]>;

    scriptIpfsHash(overrides?: CallOverrides): Promise<[string]>;
  };

  aggregatorContract(overrides?: CallOverrides): Promise<string>;

  expirationTime(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillDirectRequest(
    amountOwed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOffer(
    url: string,
    apiKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initalizeOffer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBlockFulfillOfferWasCalled(overrides?: CallOverrides): Promise<BigNumber>;

  linkTokenContract(overrides?: CallOverrides): Promise<string>;

  offeree(overrides?: CallOverrides): Promise<string>;

  offerer(overrides?: CallOverrides): Promise<string>;

  recoverFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registryContract(overrides?: CallOverrides): Promise<string>;

  scriptIpfsHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aggregatorContract(overrides?: CallOverrides): Promise<string>;

    expirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillDirectRequest(
      amountOwed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillOffer(
      url: string,
      apiKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initalizeOffer(overrides?: CallOverrides): Promise<void>;

    lastBlockFulfillOfferWasCalled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkTokenContract(overrides?: CallOverrides): Promise<string>;

    offeree(overrides?: CallOverrides): Promise<string>;

    offerer(overrides?: CallOverrides): Promise<string>;

    recoverFunds(overrides?: CallOverrides): Promise<void>;

    registryContract(overrides?: CallOverrides): Promise<string>;

    scriptIpfsHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    aggregatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillDirectRequest(
      amountOwed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOffer(
      url: string,
      apiKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initalizeOffer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBlockFulfillOfferWasCalled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkTokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    offeree(overrides?: CallOverrides): Promise<BigNumber>;

    offerer(overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registryContract(overrides?: CallOverrides): Promise<BigNumber>;

    scriptIpfsHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregatorContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillDirectRequest(
      amountOwed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOffer(
      url: string,
      apiKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initalizeOffer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBlockFulfillOfferWasCalled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkTokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scriptIpfsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
