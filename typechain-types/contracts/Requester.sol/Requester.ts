/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RequesterInterface extends utils.Interface {
  functions: {
    "fulfillDirectRequest(bytes32,bytes32)": FunctionFragment;
    "makeRequest(string,string,string,string)": FunctionFragment;
    "result()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "fulfillDirectRequest" | "makeRequest" | "result"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfillDirectRequest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "fulfillDirectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;

  events: {
    "RequestFulfilled(bytes32,bytes32)": EventFragment;
    "RequestSent(bytes4,string,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface RequestFulfilledEventObject {
  result: string;
  requestId: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string, string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  callbackFunctionId: string;
  js: string;
  cid: string;
  vars: string;
  ref: string;
}
export type RequestSentEvent = TypedEvent<
  [string, string, string, string, string],
  RequestSentEventObject
>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface Requester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RequesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillDirectRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeRequest(
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    result(overrides?: CallOverrides): Promise<[string]>;
  };

  fulfillDirectRequest(
    requestId: BytesLike,
    _result: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeRequest(
    js: string,
    cid: string,
    vars: string,
    ref: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  result(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fulfillDirectRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    makeRequest(
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: CallOverrides
    ): Promise<string>;

    result(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RequestFulfilled(bytes32,bytes32)"(
      result?: null,
      requestId?: null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      result?: null,
      requestId?: null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes4,string,string,string,string)"(
      callbackFunctionId?: null,
      js?: null,
      cid?: null,
      vars?: null,
      ref?: null
    ): RequestSentEventFilter;
    RequestSent(
      callbackFunctionId?: null,
      js?: null,
      cid?: null,
      vars?: null,
      ref?: null
    ): RequestSentEventFilter;
  };

  estimateGas: {
    fulfillDirectRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeRequest(
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    result(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillDirectRequest(
      requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeRequest(
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    result(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
