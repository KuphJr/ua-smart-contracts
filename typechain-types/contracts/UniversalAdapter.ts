/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface UniversalAdapterInterface extends utils.Interface {
  functions: {
    "REQUEST_COST_IN_JULES()": FunctionFragment;
    "balance(uint8)": FunctionFragment;
    "makeRequest(bytes4,string,string,string,string)": FunctionFragment;
    "respondWithHashedAnswer(bytes32,bytes8)": FunctionFragment;
    "respondWithUnhashedAnswer(bytes32,uint256,bytes32)": FunctionFragment;
    "withdrawEarnings()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REQUEST_COST_IN_JULES"
      | "balance"
      | "makeRequest"
      | "respondWithHashedAnswer"
      | "respondWithUnhashedAnswer"
      | "withdrawEarnings"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REQUEST_COST_IN_JULES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [BytesLike, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "respondWithHashedAnswer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "respondWithUnhashedAnswer",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "REQUEST_COST_IN_JULES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondWithHashedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondWithUnhashedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface OracleRequestEventObject {
  specId: string;
  requester: string;
  requestId: string;
  payment: BigNumber;
  callbackAddr: string;
  callbackFunctionId: string;
  cancelExpiration: BigNumber;
  dataVersion: BigNumber;
  data: string;
}
export type OracleRequestEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  OracleRequestEventObject
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export interface UniversalAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REQUEST_COST_IN_JULES(overrides?: CallOverrides): Promise<[BigNumber]>;

    balance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeRequest(
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      answer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REQUEST_COST_IN_JULES(overrides?: CallOverrides): Promise<BigNumber>;

  balance(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  makeRequest(
    callbackFunctionId: BytesLike,
    js: string,
    cid: string,
    vars: string,
    ref: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respondWithHashedAnswer(
    requestId: BytesLike,
    hashedAnswer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respondWithUnhashedAnswer(
    requestId: BytesLike,
    salt: BigNumberish,
    answer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEarnings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REQUEST_COST_IN_JULES(overrides?: CallOverrides): Promise<BigNumber>;

    balance(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    makeRequest(
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: CallOverrides
    ): Promise<string>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      answer: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawEarnings(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;

    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)"(
      specId?: BytesLike | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      specId?: BytesLike | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
  };

  estimateGas: {
    REQUEST_COST_IN_JULES(overrides?: CallOverrides): Promise<BigNumber>;

    balance(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    makeRequest(
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      answer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REQUEST_COST_IN_JULES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeRequest(
      callbackFunctionId: BytesLike,
      js: string,
      cid: string,
      vars: string,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respondWithHashedAnswer(
      requestId: BytesLike,
      hashedAnswer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respondWithUnhashedAnswer(
      requestId: BytesLike,
      salt: BigNumberish,
      answer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
